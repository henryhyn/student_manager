<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 启用 Spring 的基于 annotation 的 DI, 使得用户可以在 Spring MVC 中使用 @Resource, @Required 等注解 -->
    <context:annotation-config/>

    <!-- DispatcherServlet 的上下文只管理 @Controller 类型的 bean, 而其他类型的 bean 由 Spring 上下文管理 -->
    <context:component-scan base-package="com.nengjun.student.manager.controller com.nengjun.student.manager.service">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 启用注解驱动, 可以将请求参数绑定到控制器参数 -->
    <mvc:annotation-driven/>

    <!-- 处理静态资源, 如 css, js, fonts, images 等等 -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- 配置 ViewResolver, 可以有多个, 使用 order 属性排序, InternalResourceViewResolver 需要放在最后 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
        <property name="defaultViews">
            <list>
                <!-- JSON View -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
                <!-- XML View -->
                <bean class="org.springframework.web.servlet.view.xml.MappingJackson2XmlView"/>
            </list>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--200*1024*1024 即 200M resolveLazily 属性启用是为了推迟文件解析, 以便捕获文件大小异常 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>
</beans>
